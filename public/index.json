[
{
	"uri": "https://fortinetsecdevops.github.io/DemoFrontEnd/ch2-githubflow/1_whatis.html",
	"title": "Chapter 2.1 - Github Flow",
	"tags": [],
	"description": "",
	"content": "GitHub flow\u0026hellip; is a way of managing software development workflows using Git and GitHub. It is a lightweight, branch-based workflow that emphasizes collaboration, continuous integration, and continuous delivery.\nFrom a networking perspective, think of each branch in the workflow as a separate network segment or VLAN. Each branch represents a different development environment where code changes can be tested and integrated before being merged into the main codebase.\nThe workflow starts with a developer creating a new branch for a feature or bug fix. This branch is essentially a copy of the main codebase that can be modified independently without affecting the main codebase. The developer makes changes to the code in this branch and pushes those changes to a remote repository hosted on GitHub.\nNext, the changes in the branch are tested and integrated using automated testing and continuous integration tools. This is similar to network testing and monitoring tools that check for connectivity and performance issues in different network segments.\nOnce the changes have been tested and integrated successfully, they are ready to be merged into the main codebase. This is done using a pull request, which allows other developers to review the changes and provide feedback before they are merged.\nFrom a networking perspective, a pull request is like a request to add a new network segment or VLAN to the network. Other network engineers review the request and make sure that the new segment or VLAN is properly configured and secured before it is added to the network.\nOnce the pull request is approved and merged, the changes are added to the main codebase and the process starts again with a new branch for the next feature or bug fix.\nOverall, GitHub flow is a flexible and scalable way to manage software development workflows. It allows developers to work on different features or bug fixes in parallel without interfering with each other and provides a mechanism for continuous testing, integration, and delivery of changes to the main codebase.\n"
},
{
	"uri": "https://fortinetsecdevops.github.io/DemoFrontEnd/",
	"title": "Fortinet Git 101",
	"tags": [],
	"description": "",
	"content": "Fortinet Git 101 Welcome! This site has been built to help acclimate you to using Git, GitHub, and the GitHub flow.\nLearning Objectives Understand git, and the commands needed to contribute within this repo. Understand GitHub, GitHub Actions, and the automation we\u0026rsquo;ve implemented. Understand GitHub flow, and how to use git to contribute. About Hugo and Fortinet TECRecipies !!!!!!!!!!!!!! RECREATE NEW CONTENT FOR EVERYTHING BELOW HERE !!!!!!!!!!!!! "
},
{
	"uri": "https://fortinetsecdevops.github.io/DemoFrontEnd/ch1-git/1_whatisit.html",
	"title": "Git",
	"tags": [],
	"description": "",
	"content": "Chapter 1 - What is Git Git Summary Git is a distributed version control system designed to help developers manage and collaborate on software projects. It was created by Linus Torvalds in 2005 and has since become one of the most widely used version control systems in the world. Git is open source software and is free to use, making it accessible to developers of all levels.\nThe core idea behind Git is to provide a way for developers to track changes made to a codebase over time, allowing multiple developers to work on the same project without interfering with each other. Git accomplishes this by creating a local repository on each developer\u0026rsquo;s computer, which stores a complete copy of the codebase and all changes made to it.\nOne of the key features of Git is its ability to handle branching and merging. This allows developers to work on multiple independent lines of development simultaneously and merge changes back into the main codebase when they are ready. This makes it easy for developers to work on different features or bug fixes without interfering with each other\u0026rsquo;s work.\nGit also provides a number of other useful features, such as the ability to revert changes made to a codebase, track the history of changes, and collaborate with other developers using remote repositories hosted on services like GitHub or Bitbucket.\nThe Three States of Git Git has three main states that files can be in: the working directory, the staging area, and the repository.\nThe working directory: This is the directory on your local machine where you make changes to your files. The staging area: This is an intermediate area where you can review and stage changes before committing them to the repository. Files in the staging area are not yet committed, but they are marked as being ready for commit. The repository: This is where Git permanently stores the committed changes to your files. The repository includes the entire history of changes made to the files. Moving Files Between States Files can move between the three states in Git as follows:\nWorking directory to staging area: You can add changes made to files in the working directory to the staging area using the git add command. Staging area to repository: Once you have reviewed and staged your changes, you can commit them to the repository using the git commit command. This permanently saves the changes to the repository. Repository to working directory: You can update the files in your working directory with the most recent changes from the repository using the git pull command. How Git Keeps Track of Changes Git keeps track of changes to files using a system of snapshots. Each time you commit changes, Git takes a snapshot of the files in the repository at that point in time. When you view the history of commits, you can see the differences between each snapshot and how the files have changed over time.\nGit uses a unique identifier called a SHA-1 hash to track each commit and ensure the integrity of the repository. This means that any changes to the repository are immediately detectable, and you can always trace back to the original commit that introduced a particular change.\nOverall, understanding the three states of Git and how Git tracks changes to files is essential for effectively using Git for version control.\n"
},
{
	"uri": "https://fortinetsecdevops.github.io/DemoFrontEnd/ch3-ouruse/2_task1.html",
	"title": "Task 1 - Insert Hugo content into your Parent Repo ",
	"tags": [],
	"description": "",
	"content": "Task 1 - Insert Hugo content into your Parent repo We want to house the Hugo content close to the rest of your demo content (terraform/cloudformation/scripts/etc). So all you have to do is copy your hugo content into your parent repo root directory copy your entire Hugo folder DemoFrontEnd to the root of the repo you\u0026rsquo;re using for your Demo. Folder structure should look similar to the following: "
},
{
	"uri": "https://fortinetsecdevops.github.io/DemoFrontEnd/ch1-git/2_branches.html",
	"title": "Branches",
	"tags": [],
	"description": "",
	"content": "Git Branches Git branches are a key feature of Git that allow developers to create independent lines of development for a project. A branch is essentially a separate version of the codebase that exists alongside the main codebase in the repository. This allows developers to work on different features or fixes without affecting the main codebase until they are ready to be merged.\nThe basic process of branching in Git involves creating a new branch from an existing branch, which can be the main branch or another existing branch. Once a new branch is created, developers can make changes to the code in the new branch without affecting the main codebase or other branches. This makes it easy to work on multiple features or fixes in parallel without interfering with each other.\nWhen changes in a branch are ready to be incorporated into the main codebase, developers can use the Git merge command to merge the changes from the branch into the main codebase. This combines the changes from the branch with the main codebase, resolving any conflicts that may arise.\nGit branch management is an important aspect of using branches effectively. This involves creating and managing branches, tracking changes made in different branches, and resolving conflicts that arise when merging changes from different branches. It is important to keep track of branches and ensure that changes are properly documented and tracked, so that developers can easily understand what changes have been made and why.\nRemote branches are branches that exist in a remote repository, such as on a shared server or on a code hosting platform like GitHub or Bitbucket. These branches can be accessed and worked on by multiple developers, and changes can be merged back into the main codebase when they are ready.\nRebasing is another important feature of Git that allows developers to move changes from one branch to another. This involves taking the changes from one branch and applying them to another branch, essentially re-writing the history of the branch to incorporate the changes from another branch. This can be useful for keeping a clean and concise commit history and avoiding conflicts when merging changes from different branches.\nOverall, Git branches are a powerful tool for managing software projects and collaborating with other developers. By using branches effectively, developers can work on different features and fixes in parallel without interfering with each other, and ensure that changes are properly documented and tracked throughout the development process.\n"
},
{
	"uri": "https://fortinetsecdevops.github.io/DemoFrontEnd/ch2-githubflow/2_task2.html",
	"title": "Task 2 - Branch and Change",
	"tags": [],
	"description": "",
	"content": "Task 2 - Branch, Clone, Change, Commit\u0026hellip;. Each Chapter can have 1 or more tasks which should be completed by the participants Naming of the task Markdown pages doesn\u0026rsquo;t matter, and is only used to aid the content author in organizing the content. Info\nNote that the filename doesn\u0026rsquo;t matter other than to help organize content. The Title and Weight dictate the leftnav visual and ordering of the pages. Lower weight pages are displayed first\nWarning\nBecause the file and folder names are very similar in our example repo, it can become confusing to know where to make edits. Make sure you\u0026rsquo;re editing the correct file in your IDE/editor\nThis page contains several useful markdown shortcodes you can use for visual pop-outs on the the site ⭐ Tips this is a star 💡 this is a lightbulb\nNote\nMake sure you use the \u0026ndash;recurse-submodules tag so that you get all the underlying resources that allow the framework to operate properly\nTip\nthis is a tip box\nInfo\nthis is a tip box\nWarning\nThe examples and sample code provided in this workshop are intended to be consumed as instructional content. These will help you understand how various Fortinet and Azure services can be architected to build a solution while demonstrating best practices along the way. These examples are not intended for use in production environments without full understanding of how they operate.\n"
},
{
	"uri": "https://fortinetsecdevops.github.io/DemoFrontEnd/ch3-ouruse/3_task2.html",
	"title": "Task 2 - Push content to your repo",
	"tags": [],
	"description": "",
	"content": "Task 2 - Push your content to GitHubo repo In a terminal window, Browse to the root within this repo yellow push Note\nYou may need to first issue a git fetch or other actions to get your content properly uploaded to GitHub.\n"
},
{
	"uri": "https://fortinetsecdevops.github.io/DemoFrontEnd/ch1-git/3_task1-install.html",
	"title": "Task 1 - Install Git",
	"tags": [],
	"description": "",
	"content": "Task 2 - Install Git To install Git, follow the directions provided by the official website: https://git-scm.com/book/en/v2/Getting-Started-Installing-Git\n(excerpts taken from above webpage, as of 04-17-2023)\nInstalling on macOS There are several ways to install Git on macOS. The easiest is probably to install the Xcode Command Line Tools. On Mavericks (10.9) or above you can do this simply by trying to run git from the Terminal the very first time.\n$ git \u0026ndash;version\nIf you don’t have it installed already, it will prompt you to install it.\nIf you want a more up to date version, you can also install it via a binary installer. A macOS Git installer is maintained and available for download at the Git website, at https://git-scm.com/download/mac.\nInstalling on Windows There are also a few ways to install Git on Windows. The most official build is available for download on the Git website. Just go to https://git-scm.com/download/win and the download will start automatically. Note that this is a project called Git for Windows, which is separate from Git itself; for more information on it, go to https://gitforwindows.org.\nTo get an automated installation you can use the Git Chocolatey package. Note that the Chocolatey package is community maintained.\n! Its recommended for our workflows to install Windows Subsystem for Linux 2 (WSL2). Example instructions for installing Ubuntu on WSL2 can be found here: https://ubuntu.com/tutorials/install-ubuntu-on-wsl2-on-windows-11-with-gui-support#1-overview With WSL 2 installed, you can install via Linux instructions below.\nInstalling on Linux If you want to install the basic Git tools on Linux via a binary installer, you can generally do so through the package management tool that comes with your distribution. If you’re on Fedora (or any closely-related RPM-based distribution, such as RHEL or CentOS), you can use dnf:\n$ sudo dnf install git-all\nIf you’re on a Debian-based distribution, such as Ubuntu, try apt:\n$ sudo apt install git-all\nFor more options, there are instructions for installing on several different Unix distributions on the Git website, at https://git-scm.com/download/linux.\nPost Install After installing, you can validate your installation by entering git \u0026ndash;version from the cli: jeremy@localhost:~/repos/FortiGit$ git \u0026ndash;version git version 2.34.1\n"
},
{
	"uri": "https://fortinetsecdevops.github.io/DemoFrontEnd/ch2-githubflow/3_task3.html",
	"title": "Task 3 - Adjust config.toml site settings",
	"tags": [],
	"description": "",
	"content": "Task 3 - View your branch, submit pull request Open the config.toml file under the repo root to change a few parameters of the site Edit the baseUrl to match the GitHub Page for your site (you won\u0026rsquo;t have this until you\u0026rsquo;ve done at least 1 GitHub action/build) Add information URL\u0026rsquo;s to the bottom of the leftnav bar with [[menu.shortcuts]] menu.shortcuts are displayed lowest to highest according to their weight Additional customizations can be made with themeVariants, but they won\u0026rsquo;t be covered here "
},
{
	"uri": "https://fortinetsecdevops.github.io/DemoFrontEnd/ch3-ouruse/4_task3.html",
	"title": "Task 3 - Create GitHub action for Hugo Publish",
	"tags": [],
	"description": "",
	"content": "Task 3 - Create GitHub action for Hugo Publish Warning\nYou must have proper repo permissions to setup a GitHub action. If you do not see the settings button on the top repo banner/ribbon, please reach out to the repo owner to get the proper permissions\nIn your web browser, navigate to the GitHub repo and click on Settings in the top ribbon On the left hand nav bar, click on Pages Under Source select GitHub Actions Click Browse All Workflows Search for Hugo and then click Configure under the Hugo GitHub Actions You\u0026rsquo;ll see a hugo.yml file created, which directs GitHubActions to execute a Hugo Build Command anytime the repo is updated. We need to make 1 minor adjustment to this file. B/c we located our hugo content underneath the repo root, we need to tell hugo where it needs to build and publish. Once updated per your folder naming in the spots shown below, click Start Commit Specifically, you want to add a working-directory under the jobs: \u0026ndash;\u0026gt; build: \u0026ndash;\u0026gt; steps: section and then update the Upload Artifact path. You can copy and paste this entire script into your hugo.yml file, or just edit the specific lines for working directory (in the bottom 1/3 of the file)\n# Sample workflow for building and deploying a Hugo site to GitHub Pages name: Deploy Hugo site to Pages on: # Runs on pushes targeting the default branch push: branches: [\u0026#34;main\u0026#34;] # Allows you to run this workflow manually from the Actions tab workflow_dispatch: # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages permissions: contents: read pages: write id-token: write # Allow one concurrent deployment concurrency: group: \u0026#34;pages\u0026#34; cancel-in-progress: true # Default to bash defaults: run: shell: bash jobs: # Build job build: runs-on: ubuntu-latest env: HUGO_VERSION: 0.108.0 steps: - name: Install Hugo CLI run: | wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \\ \u0026amp;\u0026amp; sudo dpkg -i ${{ runner.temp }}/hugo.deb - name: Install Dart Sass Embedded run: sudo snap install dart-sass-embedded - name: Checkout uses: actions/checkout@v3 with: submodules: recursive - name: Setup Pages id: pages uses: actions/configure-pages@v2 - name: Install Node.js dependencies run: \u0026#34;[[ -f package-lock.json || -f npm-shrinkwrap.json ]] \u0026amp;\u0026amp; npm ci || true\u0026#34; - name: Build with Hugo env: # For maximum backward compatibility with Hugo modules HUGO_ENVIRONMENT: production HUGO_ENV: production run: | hugo \\ --minify \\ --baseURL \u0026#34;${{ steps.pages.outputs.base_url }}/\u0026#34; working-directory: ./hugeowebfront - name: Upload artifact uses: actions/upload-pages-artifact@v1 with: path: ./hugeowebfront/public # Deployment job deploy: environment: name: github-pages url: ${{ steps.deployment.outputs.page_url }} runs-on: ubuntu-latest needs: build steps: - name: Deploy to GitHub Pages id: deployment uses: actions/deploy-pages@v1 7. Click to Commit new file 8. You\u0026rsquo;ll see the new GitHub action file hugo.yml created in the .github/workflows folder of the repo. You can review the action to see results of the build "
},
{
	"uri": "https://fortinetsecdevops.github.io/DemoFrontEnd/ch1-git/4_glossary.html",
	"title": "Common Commands",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://fortinetsecdevops.github.io/DemoFrontEnd/ch1-git.html",
	"title": "Ch 1 - What is Git?",
	"tags": [],
	"description": "",
	"content": "Hugo - Getting started History of Git Git was created by Linus Torvalds in 2005 as a distributed version control system for the development of the Linux kernel. Prior to Git, the Linux kernel was managed using the proprietary BitKeeper tool, but this caused some controversy in the open source community. As a result, Torvalds decided to create his own version control system, which he named Git.\nSince its creation, Git has become one of the most widely used version control systems in the world, and is now used for managing software projects of all types and sizes. Version Control\nVersion Control Version control is a system that allows you to track changes made to files over time. It is commonly used in software development to manage code changes, but can also be used for managing any type of digital content.\nVersion control systems like Git allow multiple developers to work on the same files at the same time, while keeping track of all changes made to the files. This makes it easy to collaborate on projects, manage code revisions, and ensure that all changes are properly documented and tracked.\nVersion control also provides a history of changes made to files, allowing developers to revert to previous versions if necessary. This helps to prevent data loss and makes it easy to identify and fix bugs in code.\nOverall, version control is an essential tool for managing software projects, and Git is one of the most popular and widely used version control systems available today.\n"
},
{
	"uri": "https://fortinetsecdevops.github.io/DemoFrontEnd/ch2-githubflow.html",
	"title": "Ch 2 - Software Workflows",
	"tags": [],
	"description": "",
	"content": "Learn what software workflows are, and how we use them. Software development workflows are a set of processes and practices used to manage the creation, testing, and deployment of software applications. From a networking perspective, you can think of software development workflows as similar to network operations workflows that are used to manage the deployment and maintenance of network infrastructure.\nIn software development, the workflow typically starts with requirements gathering and analysis, where developers work with stakeholders to define the scope and requirements of the software application. This is similar to network engineers working with business stakeholders to understand their networking requirements.\nNext, developers create a design for the application, which includes the software architecture, data models, and user interfaces. This is similar to network engineers creating network diagrams and architectural designs for the network infrastructure.\nOnce the design is complete, the software development team begins the implementation phase, where they write code and develop software components. This is similar to network engineers configuring network devices and implementing network services.\nDuring the implementation phase, developers also perform testing and quality assurance to ensure that the software works as intended and meets the requirements. This is similar to network engineers performing network testing and monitoring to ensure that the network infrastructure is performing optimally and meeting business requirements.\nOnce the testing is complete, the software is deployed to a production environment. This is similar to network engineers deploying network infrastructure and services to production environments.\nAfter deployment, developers continue to monitor and maintain the software, making bug fixes and adding new features as needed. This is similar to network engineers performing ongoing network maintenance and troubleshooting to ensure that the network infrastructure is operating smoothly.\nOverall, software development workflows are an essential part of creating and maintaining software applications. They help developers and stakeholders manage the complex processes involved in software development and ensure that software applications meet business requirements and deliver value to users.\n"
},
{
	"uri": "https://fortinetsecdevops.github.io/DemoFrontEnd/ch3-ouruse.html",
	"title": "Ch 3 - Hugo Publish via GitHub Actions (CI/CD)",
	"tags": [],
	"description": "",
	"content": "Publish your content to GitHub pages via a GitHub action Now that you have your content first draft, push your repo to github, and setup an action to automatically build your Hugo content anytime you upload to the repo\nClick the right arrow to go through each step individually\n"
},
{
	"uri": "https://fortinetsecdevops.github.io/DemoFrontEnd/extra_credit.html",
	"title": "Extra Credit",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://fortinetsecdevops.github.io/DemoFrontEnd/categories.html",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://fortinetsecdevops.github.io/DemoFrontEnd/tags.html",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]